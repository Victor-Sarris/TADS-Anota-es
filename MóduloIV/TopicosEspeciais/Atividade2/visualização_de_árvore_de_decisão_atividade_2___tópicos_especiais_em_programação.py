# -*- coding: utf-8 -*-
"""Visualização de Árvore de decisão - Atividade 2 | Tópicos especiais em programação

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1clO-VEGrF_XXDlMT-SEkDYSOomTOz5A-
"""

# pip install c45-decision-tree

"""# IMPORTAÇÃO DE BIBLIOTECAS E DATASET

Consideração: Para o funcionamento correto do algoritmo, será necessária fazer a importação do dataset disponível em: https://archive.ics.uci.edu/dataset/936/national+poll+on+healthy+aging+(npha)

Utilizei o sklearn para a conclusão dessa atividade.
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
import graphviz
import numpy as np
from sklearn.tree import export_graphviz
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

model = "NPHA-doctor-visits.csv"
df = pd.read_csv(model)

print(df.head())

target = "Gender"
X = df.drop(columns=[target])
y = df[target]

X = pd.get_dummies(X)
y = pd.factorize(y)[0]

clf_split = DecisionTreeClassifier()
clf_split.fit(X, y)

clf_full = DecisionTreeClassifier(criterion="entropy", random_state=42)
clf_full.fit(X, y)
y_pred_full = clf_full.predict(X)
print("Acurácia com todo dataset:", accuracy_score(y, y_pred_full))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf_split = DecisionTreeClassifier(criterion="entropy", random_state=42)
clf_split.fit(X_train, y_train)

"""# NORMALIZAÇÃO DE DADOS

Aqui eu fiz a normalização dos valores das regras de decisão. Todos os valores agora estão entre 0 e 1, assim obedecendo a normalização
"""

# fazendo a normalização dos dados
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
# faze de treinamento
X_test_scaled = scaler.transform(X_test)
X_train_scaled = pd.DataFrame(X_train_scaled, columns=X.columns)

clf_split = DecisionTreeClassifier(criterion="entropy", random_state=42)
clf_split.fit(X_train_scaled, y_train)

print("Acurácia treino:", accuracy_score(y_train, clf_split.predict(X_train)))
print("Acurácia teste:", accuracy_score(y_test, clf_split.predict(X_test)))

dot_data = export_graphviz(
    clf_split,
    out_file=None,
    feature_names=X.columns,
    class_names=[str(c) for c in np.unique(y)],
    filled=True,
    rounded=True
)

graph = graphviz.Source(dot_data)
graph
# graph.render("tree", format="png", cleanup=True)  # salva
# graph.view()